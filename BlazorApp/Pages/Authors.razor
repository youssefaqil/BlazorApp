@page "/"

@inject Services.IAuthorService  authorService
@inject IJSRuntime JSRuntime
@using BlazorApp.Data


<h3>Authors</h3>

<div class="col-12">
    <h3><b>Entrer  Author Information</b></h3>

   <ServerValidation IsVisible="IsVisible" Results="Results">
       <span>Author: @RecordName </span>
   </ServerValidation>
    <hr />
    <EditForm Model="@author" OnValidSubmit="@SaveAuthor">
        @*<DataAnnotationsValidator />*@

        <div class="col-12 row">
            <label class="col-2 font-weight-bold">first name :</label>
            <input @ref="firstNameText"  class="form-control col-3" @bind ="author.FirstName" placeholder="first name" />
            &nbsp;<ValidationMessage For="@(() => author.FirstName)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">last name :</label>
            <InputText class="form-control col-3" @bind-Value="author.LastName" placeholder="last name" />
            &nbsp;<ValidationMessage For="@(() => author.LastName)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">city :</label>
            <InputSelect @bind-Value="author.City" class="form-control col-3">
                @if (@Cities != null)
                {
                    <option value="">select city..</option>
                    @foreach (var city in Cities)
                    {
                        <option value="@city">@city</option>
                    }
                }
            </InputSelect>
            @*<SelectCity></SelectCity>*@

            @*<InputText class="form-control col-3" @bind-Value="author.City" placeholder="city" />
            &nbsp;<ValidationMessage For="@(() => author.City)" />*@
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">email address :</label>
            <InputText class="form-control col-3" @bind-Value="author.EmailAddress" placeholder="email address" />
            &nbsp;<ValidationMessage For="@(() => author.EmailAddress)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">salary :</label>
            <InputNumber class="form-control col-3" @bind-Value="author.Salary" />
            &nbsp;<ValidationMessage For="@(() => author.Salary)" />
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Save" />
            <span>&nbsp;</span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Clear" />
        </div>

    </EditForm>
</div>

<hr />
<br />
@*<div class="col-12">


    @foreach (Author author in AuthorList)
    {
        <div class="col-12 row">
            <div class="col-2">
                <NavLink class="nav-link" href=@string.Format("/authors/authordetail/{0}",@author.AuthorId)>@author.AuthorId</NavLink>
            </div>
            <div class="col-2">@author.FirstName @author.LastName</div>
        </div>


    }

</div>*@

<div class="col-10">

    <h3><b>Authors</b></h3>

    <table class="table">
        <thead>
            <tr>
               
                <th>First Name</th>
                <th>Last Name</th>
                <th>City</th>
                <th>Email Address</th>
                <th>Salary</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (AuthorList != null)
            {
                @foreach (var author in AuthorList)
                {
                    <tr>
                        @*<td>
                            <NavLink href=@string.Format("/authors/authordetail/{0}", @author.AuthorId)>
                                @author.AuthorId
                            </NavLink>
                        </td>*@
                        <td>@author.FirstName</td>
                        <td>@author.LastName</td>
                        <td>@author.City</td>
                        <td>@author.EmailAddress</td>
                        <td>@author.Salary €</td>
                    <td>
                        @*<a style="text-underline-position:below; cursor:pointer; color:blue; font-weight:bold"
                           @onclick="(() => EditAuthor(author))">Edit</a> |
                        <a style="text-underline-position:below; cursor:pointer; color:blue; font-weight:bold"
                           @onclick="(() => DeleteAuthor(author.AuthorId))">Delete</a> |*@
                        <NavLink class="nav-link" href=@string.Format("/authors/authordetail/{0}",@author.AuthorId)>Detail</NavLink>
                    </td>
                    </tr>
                }
            }

        </tbody>
    </table>
</div>

<br />
<hr />

<div class="col-12 row">@authorService.GetCreateDate()</div>
<div class="col-12 row">Version: @authorService.GetVersion()</div>





@code {

    public Author author { get; set; }
    public List<Author> AuthorList { get; set; }
    public string[] Cities { get; set; }
    ElementReference firstNameText;
    public bool IsVisible { get; set; }
    public bool Results { get; set; }
    public string RecordName { get; set; }
    // public AuthorService authorService { get; set; }
    protected override async Task OnAfterRenderAsync (bool firstRender)
    {
        if (firstRender)
        {
            Cities = await JSRuntime.InvokeAsync<string[]>("getCities");
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //authorService = new AuthorService();
        author = new Author();
        AuthorList = await authorService.GetAuthors();
    }

    private async Task SaveAuthor()
    {
        await authorService.SaveAuthor(author);
        Results = true;

        IsVisible = true;

        var firstName = author.FirstName;
        var lastName = author.LastName;
        RecordName = firstName + " " + lastName;
        author = new Author();

        //await JSRuntime.InvokeVoidAsync("saveMessage");
        await JSRuntime.InvokeVoidAsync("setFocusOnElement",firstNameText);
    }
}
